{
  "hash": "485a83cc176e5bffb4234872b5f67dbe",
  "result": {
    "markdown": "---\ntitle: \"15 Données déséquilibrées\"\ntoc: true\n---\n\n\n# Données déséquilibrées et modèle logistique\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- data.frame(MALADE=c(208,42),\n                 NON_MALADE=c(48,202),\n                 FUMEUR=c(\"OUI\",\"NON\"))\nmodel <- glm(cbind(MALADE,NON_MALADE)~FUMEUR,data=df,family=binomial)\ncoef(model)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(Intercept)   FUMEUROUI \n  -1.570598    3.036935 \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nnewX <- data.frame(FUMEUR=c(\"OUI\",\"NON\"))\nrownames(newX) <- c(\"OUI\",\"NON\")\npredict(model,newdata = newX,type=\"response\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      OUI       NON \n0.8125000 0.1721311 \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbeta1_cor <- coef(model)[1]-log(0.995/0.005)\nbeta2 <- coef(model)[2]\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nexp(beta1_cor+beta2)/(1+exp(beta1_cor+beta2))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(Intercept) \n 0.02131148 \n```\n:::\n\n```{.r .cell-code}\nexp(beta1_cor)/(1+exp(beta1_cor))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(Intercept) \n0.001043738 \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntau <- c(0.05,0.95)\nind0 <- which(df$Y==0)\nind1 <- which(df$Y==1)\nchoix0 <- sample(ind0, size=length(ind0)*tau[1], replace = F)\nchoix1 <- sample(ind1, size=length(ind1)*tau[2], replace = F)\ndff <- rbind(df[choix0,], df[choix1,])\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmod <- glm(Y~., data=dff, family=\"binomial\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngamma <- coef(mod)\ngamma[1] - log(tau[2]/tau[1])\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nglm(Y~. + offset(rep(log(tau[2]/tau[1]), nrow(dff))),\n    data=dff, family=\"binomial\")\n```\n:::\n\n\n\n#  Stratégies pour données déséquilibrées\n\n## Quelques méthodes de rééquilibrage\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(123458)\nn1 <- 10\nX11 <- runif(n1,0,0.25)\nX21 <- runif(n1,0,1)\nX12 <- runif(n1,0,1)\nX22 <- runif(n1,0.75,1)\nn2 <- 80\nX13 <- runif(n2,0.25,1)\nX23 <- runif(n2,0,0.75)\nX1 <- c(X11,X12,X13)\nX2 <- c(X21,X22,X23)\nY <- c(rep(1,2*n1),rep(0,n2)) %>% as.factor()\ndf <- data.frame(X1,X2,Y,id=as.character(1:100))\ndf$Y[c(1,16)] <- 0\n#df$Y[c(41,48,59)] <- 1\ndf$Y[c(41,48)] <- 1\ndf <- df[,1:3]\nggplot(df)+aes(x=X1,y=X2)+geom_point(aes(color=Y))\n```\n\n::: {.cell-output-display}\n![](chap15_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(UBL)\nover1 <- RandOverClassif(Y~., dat=df)\nover2 <- RandOverClassif(Y~., dat=df, C.perc=list(\"0\"=1,\"1\"=2))\nsummary(over1$Y)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n 0  1 \n80 80 \n```\n:::\n\n```{.r .cell-code}\nsummary(over2$Y)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n 0  1 \n80 40 \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\nsmote1 <- SmoteClassif(Y~.,dat=df,k=4)\nsmote2 <- SmoteClassif(Y~.,dat=df,k=4,C.perc=list(\"0\"=1,\"1\"=2))\nsummary(smote1$Y)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n 0  1 \n50 50 \n```\n:::\n\n```{.r .cell-code}\nsummary(smote2$Y)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n 0  1 \n80 40 \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nnewsm1 <- anti_join(smote1,df)\nnewsm2 <- anti_join(smote2,df)\nnewsm <- bind_rows(\"smote1\"=newsm1,\"smote2\"=newsm2,.id=\"algo\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf3 <- bind_rows(\"smote1\"=smote1,\"smote2\"=smote2,.id=\"algo\")\nggplot(df3)+aes(x=X1,y=X2,color=Y)+geom_point(aes(shape=Y),size=1.5)+facet_wrap(~algo)+\n  geom_point(data=newsm,shape=1,size=4) + theme(legend.position='none')\n```\n\n::: {.cell-output-display}\n![](chap15_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nunder1 <- RandUnderClassif(Y~.,dat=df)\nunder2 <- RandUnderClassif(Y~.,dat=df,C.perc=list(\"0\"=0.5,\"1\"=1))\nsummary(under1$Y)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n 0  1 \n20 20 \n```\n:::\n\n```{.r .cell-code}\nsummary(under2$Y)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n 0  1 \n40 20 \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntomek1 <- TomekClassif(Y~.,dat=df)\ntomek2 <- TomekClassif(Y~.,dat=df,rem=\"maj\")\ntomek1[[2]]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]   1   7  12  69  14 100  16  17\n```\n:::\n\n```{.r .cell-code}\ntomek2[[2]]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]   1  69 100  16\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nind1 <- tomek1[[2]]\nind2 <- tomek2[[2]]\nXS1 <- df[ind1,]\nXS2 <- df[ind2,]\nXS <- bind_rows(\"tomek1\"=XS1,\"tomek2\"=XS2,.id=\"algo\")\ndf5 <- bind_rows(\"tomek1\"=df,\"tomek2\"=df,.id=\"algo\")\nggplot(df5)+aes(x=X1,y=X2,color=Y)+geom_point(aes(color=Y,shape=Y),size=1.5)+facet_wrap(~algo)+\n  geom_point(data=XS,shape=1,size=4) + theme(legend.position='none')\n```\n\n::: {.cell-output-display}\n![](chap15_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n\n## Critères pour données déséquilibrées\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n   P1\nY     0   1\n  0 468   0\n  1  31   1\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n   P2\nY     0   1\n  0 407  61\n  1   4  28\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(yardstick)\ndf <- data.frame(Y,P2)\nmulti_metric <- metric_set(accuracy,bal_accuracy,f_meas,kap)\nmulti_metric(df,truth=Y,estimate=P2,event_level = \"second\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 3\n  .metric      .estimator .estimate\n  <chr>        <chr>          <dbl>\n1 accuracy     binary         0.87 \n2 bal_accuracy binary         0.872\n3 f_meas       binary         0.463\n4 kap          binary         0.407\n```\n:::\n:::\n\n\n# Choisir un algorithme de rééquilibrage\n\n## Application aux données d'images publicitaires\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(ad.data1$Y)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   ad. nonad. \n   459   2820 \n```\n:::\n\n```{.r .cell-code}\nad.data1 <- ad.data1 %>% \n  transform(Y=fct_recode(Y,\"0\"=\"nonad.\",\"1\"=\"ad.\")) %>% \n  transform(Y=fct_inseq(Y))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\nbloc <- sample(1:10,nrow(ad.data1),replace=TRUE)\ntable(bloc)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nbloc\n  1   2   3   4   5   6   7   8   9  10 \n309 327 329 310 358 354 304 337 342 309 \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nscore <- data.frame(matrix(0,nrow=nrow(ad.data1),ncol=3))\nnames(score) <- c(\"logit\",\"lasso\",\"ridge\")\nSCORE <- list(brute=score,over=score,smote=score,under=score,tomek=score)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(4321)\nlibrary(glmnet)\nscore <- data.frame(matrix(0,nrow=nrow(ad.data1),ncol=3))\nnames(score) <- c(\"logit\",\"lasso\",\"ridge\")\nSCORE <- list(brute=score,over=score,smote=score,under=score,tomek=score)\n\nfor (k in 1:10){\n  print(k)\n  ind.test <- bloc==k\n  dapp <- ad.data1[!ind.test,]\n  dtest <- ad.data1[ind.test,]\n  X.test <- model.matrix(Y~.,data=dtest)[,-1]\n  \n  ech.app <- list(norm=dapp,\n                  over=RandOverClassif(Y~.,dat=dapp),\n                  smote=SmoteClassif(Y~.,dat=dapp),\n                  under=RandUnderClassif(Y~.,dat=dapp),\n                  tomek=TomekClassif(Y~.,dat=dapp)[[1]])\n\n  mod.mat.list <- function(df){model.matrix(Y~.,data=df)[,-1]}\n  Y.list <- function(df) df$Y \n  \n  X.app <- lapply(ech.app,mod.mat.list)\n  Y.app <- lapply(ech.app,Y.list)\n  \n  for (j in 1:5){\n    print(j)\n    lasso <- cv.glmnet(X.app[[j]],Y.app[[j]],family=\"binomial\")\n    ridge <- cv.glmnet(X.app[[j]],Y.app[[j]],family=\"binomial\",alpha=0)\n    logit <- glm(Y~.,data=ech.app[[j]],family=\"binomial\")\n    SCORE[[j]][ind.test,] <- data.frame(\n      logit=predict.glm(logit,newdata=dtest,type=\"response\"),\n      lasso=as.vector(predict(lasso,newx=X.test,type=\"response\")),\n      ridge=as.vector(predict(ridge,newx=X.test,type=\"response\"))\n    )\n  }\n}\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmat.score <- bind_rows(brutes=SCORE[[1]],\n                       over=SCORE[[2]],\n                       smote=SCORE[[3]],\n                       under=SCORE[[4]],\n                       tomek=SCORE[[5]],.id=\"meth\") %>% \n  mutate(obs=rep(ad.data1$Y,5))  %>% \n  pivot_longer(c(logit,lasso,ridge),\n               names_to = \"algo\",values_to = \"score\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmat.score %>% group_by(meth,algo) %>% \n  roc_auc(truth = obs,score,event_level = \"second\") %>%\n  pivot_wider(-c(.metric,.estimator),\n              names_from = algo,values_from = .estimate)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 4\n  meth   lasso logit ridge\n  <chr>  <dbl> <dbl> <dbl>\n1 brutes 0.943 0.831 0.980\n2 over   0.973 0.790 0.977\n3 smote  0.973 0.680 0.977\n4 tomek  0.950 0.763 0.979\n5 under  0.956 0.787 0.964\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmat.score <- mat.score %>% mutate(prev=as.factor(round(score)))\n```\n:::\n\n\n-   **Accuracy** :\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    mat.score %>% \n      group_by(meth,algo) %>% \n      accuracy(truth = obs,prev) %>%\n      pivot_wider(names_from = algo,values_from = .estimate) %>%\n      select(-(2:3))\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    ```\n    # A tibble: 5 × 4\n      meth   lasso logit ridge\n      <chr>  <dbl> <dbl> <dbl>\n    1 brutes 0.969 0.886 0.970\n    2 over   0.961 0.847 0.963\n    3 smote  0.960 0.699 0.960\n    4 tomek  0.969 0.818 0.970\n    5 under  0.954 0.808 0.955\n    ```\n    :::\n    :::\n\n\n-   **Balanced accuracy** :\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    mat.score %>% \n      group_by(meth,algo) %>% \n      bal_accuracy(truth = obs,prev) %>%\n      pivot_wider(names_from = algo,values_from = .estimate) %>%\n      select(-(2:3))\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    ```\n    # A tibble: 5 × 4\n      meth   lasso logit ridge\n      <chr>  <dbl> <dbl> <dbl>\n    1 brutes 0.898 0.832 0.900\n    2 over   0.931 0.806 0.935\n    3 smote  0.933 0.680 0.933\n    4 tomek  0.896 0.797 0.900\n    5 under  0.921 0.792 0.899\n    ```\n    :::\n    :::\n\n-   **F1 score** :\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    mat.score %>% \n      group_by(meth,algo) %>% \n      f_meas(truth = obs,prev,event_level = \"second\") %>%\n      pivot_wider(names_from = algo,values_from = .estimate) %>%\n      select(-(2:3))\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    ```\n    # A tibble: 5 × 4\n      meth   lasso logit ridge\n      <chr>  <dbl> <dbl> <dbl>\n    1 brutes 0.879 0.650 0.884\n    2 over   0.864 0.579 0.873\n    3 smote  0.863 0.378 0.862\n    4 tomek  0.876 0.542 0.882\n    5 under  0.843 0.529 0.837\n    ```\n    :::\n    :::\n\n\n-   **Kappa de Cohen** :\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    mat.score %>% \n      group_by(meth,algo) %>% \n      kap(truth = obs,prev) %>%\n      pivot_wider(names_from = algo,values_from = .estimate) %>%\n      select(-(2:3))\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    ```\n    # A tibble: 5 × 4\n      meth   lasso logit ridge\n      <chr>  <dbl> <dbl> <dbl>\n    1 brutes 0.862 0.584 0.867\n    2 over   0.842 0.491 0.851\n    3 smote  0.839 0.224 0.838\n    4 tomek  0.859 0.440 0.866\n    5 under  0.816 0.422 0.811\n    ```\n    :::\n    :::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngrille.score(mat.score,nom_algo=\"ridge\",meth=\"norm\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 11 × 7\n   seuil  sens  spec accuracy bal_accuracy f_meas   kap\n   <chr> <dbl> <dbl>    <dbl>        <dbl>  <dbl> <dbl>\n 1 0     1     0        0.14         0.5    0.246 0    \n 2 0.1   0.955 0.671    0.711        0.813  0.48  0.343\n 3 0.2   0.932 0.745    0.771        0.839  0.533 0.416\n 4 0.3   0.911 0.851    0.86         0.881  0.645 0.566\n 5 0.4   0.885 0.918    0.913        0.901  0.74  0.69 \n 6 0.5   0.843 0.983    0.964        0.913  0.867 0.846\n 7 0.6   0.797 0.991    0.964        0.894  0.861 0.841\n 8 0.7   0.739 0.995    0.959        0.867  0.834 0.811\n 9 0.8   0.672 0.997    0.952        0.835  0.796 0.77 \n10 0.9   0.562 0.999    0.938        0.78   0.717 0.685\n11 1     0     1        0.86         0.5   NA     0    \n```\n:::\n\n```{.r .cell-code}\ngrille.score(mat.score,nom_algo=\"ridge\",meth=\"over\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 11 × 7\n   seuil  sens  spec accuracy bal_accuracy f_meas   kap\n   <chr> <dbl> <dbl>    <dbl>        <dbl>  <dbl> <dbl>\n 1 0     1     0        0.14         0.5    0.246 0    \n 2 0.1   0.955 0.671    0.711        0.813  0.48  0.343\n 3 0.2   0.932 0.745    0.771        0.839  0.533 0.416\n 4 0.3   0.911 0.851    0.86         0.881  0.645 0.566\n 5 0.4   0.885 0.918    0.913        0.901  0.74  0.69 \n 6 0.5   0.843 0.983    0.964        0.913  0.867 0.846\n 7 0.6   0.797 0.991    0.964        0.894  0.861 0.841\n 8 0.7   0.739 0.995    0.959        0.867  0.834 0.811\n 9 0.8   0.672 0.997    0.952        0.835  0.796 0.77 \n10 0.9   0.562 0.999    0.938        0.78   0.717 0.685\n11 1     0     1        0.86         0.5   NA     0    \n```\n:::\n\n```{.r .cell-code}\ngrille.score(mat.score,nom_algo=\"ridge\",meth=\"smote\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 11 × 7\n   seuil  sens  spec accuracy bal_accuracy f_meas   kap\n   <chr> <dbl> <dbl>    <dbl>        <dbl>  <dbl> <dbl>\n 1 0     1     0        0.14         0.5    0.246 0    \n 2 0.1   0.955 0.671    0.711        0.813  0.48  0.343\n 3 0.2   0.932 0.745    0.771        0.839  0.533 0.416\n 4 0.3   0.911 0.851    0.86         0.881  0.645 0.566\n 5 0.4   0.885 0.918    0.913        0.901  0.74  0.69 \n 6 0.5   0.843 0.983    0.964        0.913  0.867 0.846\n 7 0.6   0.797 0.991    0.964        0.894  0.861 0.841\n 8 0.7   0.739 0.995    0.959        0.867  0.834 0.811\n 9 0.8   0.672 0.997    0.952        0.835  0.796 0.77 \n10 0.9   0.562 0.999    0.938        0.78   0.717 0.685\n11 1     0     1        0.86         0.5   NA     0    \n```\n:::\n:::\n",
    "supporting": [
      "chap15_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}